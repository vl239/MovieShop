@model ApplicationCore.Models.PagedResultSetModel<ApplicationCore.Models.MovieCardModel>

<div class="rounded">
    <div class="container bg-light">
        <div class="row">
            @foreach (var movie in Model.PagedData)
            {
                <div class="col-6 col-lg-3 col-sm-4 col-xl-2">

                    <partial name="_MovieCard" model="movie" />
                </div>

            }
        </div>
    </div>
</div>

@*Display previous and Next Buttons
    When you are on first Page Previous button should be disabled
    When you are on last page Next button should be disabled *@

@{
    var previousDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<nav>
    <ul class="pagination flex-wrap">
        <li class="page-item">
            <a class="btn btn-primary @previousDisabled" asp-action="Genre" asp-controller="Movies" asp-route-pageNumber="@(Model.PageNumber-1)">
                &laquo;
            </a>
        </li>
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item"><a class="page-link" asp-action="Genre" asp-controller="Movies" asp-route-pageNumber="@i">@i</a></li>
        }
        <li class="page-item">
            <a class="btn btn-primary @nextDisabled" asp-action="Genre" asp-controller="Movies" asp-route-pageNumber="@(Model.PageNumber + 1)">
                &raquo;
            </a>
        </li>
    </ul>
</nav>


@*or*@

@*Display all the page numbers 1000 records 1000/30 => 34 pages 1 2 3 ......34*
    When you are on first Page then disable First Page, when on last page disable last 34 page button
*@


